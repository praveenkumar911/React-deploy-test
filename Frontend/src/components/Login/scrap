import React, { useState } from "react";
import {
  Typography,
  Grid,
  TextField,
  Button,
  Box,
  MenuItem,
  Checkbox,
  FormControlLabel,
} from "@mui/material";
import AccountCircleIcon from "@mui/icons-material/AccountCircle";
import AWS from "aws-sdk";
import axios from 'axios'
const SignUpComp = () => {
  AWS.config.update({
    accessKeyId: "minioadmin",
    secretAccessKey: "minioadmin",
    endpoint: "http://10.8.0.13:9000", // Replace with your Minio endpoint
    s3ForcePathStyle: true,
  });
  const handleImageUpload = async (e) => {
    const file = e.target.files[0];
  
    // Create an S3 instance
    const s3 = new AWS.S3();
  
    // Set the bucket name and key for the logo
    const bucketName = "psuw001"; // Replace with your Minio bucket name
    const key = `logos/${file.name}`; // Adjust the key as needed
  
    try {
      // Upload the logo to Minio
      const uploadParams = {
        Bucket: bucketName,
        Key: key,
        Body: file,
        ContentType: file.type,
        ACL: "public-read", // Make the logo publicly accessible
      };
  
      const data = await s3.upload(uploadParams).promise();
  
      // Set the ImgUrl in the state with the Minio URL
      setFormData({ ...formData, ImgUrl: data.Location });
    } catch (error) {
      console.error("Error uploading logo to Minio:", error);
    }
  };
    
  const [formData, setFormData] = useState({
    OrgName: "",
    WebsiteUrl: "",
    GitlabID: "",
    orgType: "",
    ImgUrl: "",
    Address1: "",
    Address2: "",
    AreaName: "",
    City: "",
    state: "",
    pincode: "",
    country: "",
    role: "Org", // Added field for NGO checkbox
    email: "",
    password: "",
    access:"False"
  });

  const organizationTypes = ["Healthcare", "livelihood", "Educational"];

  const [formErrors, setFormErrors] = useState({});

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
  
    // For checkbox, use 'checked' property, for others, use 'value'
    const newValue = type === "checkbox" ? checked : value;
    const updatedValue = name === "role" ? (newValue ? "NGO" : "Org") : newValue;
    setFormData({ ...formData, [name]: updatedValue });
  };
  
  
  


  const handleSubmit = (e) => {
    e.preventDefault();
    console.log(formData)
    const response = axios.post('http://10.8.0.13:5030/signup-org', formData);
    console.log('Server Response:', response.data);
    const errors = validateForm(formData);
    if (Object.keys(errors).length === 0) {
      console.log(formData);
      setFormData({
        organizationName: "",
        WebsiteUrl: "",
        GitlabID: "",
        orgType: "",
        ImgUrl: "",
        Address1: "",
        Address2: "",
        AreaName: "",
        City: "",
        state: "",
        pincode: "",
        country: "",
        role: 'Org',
        email: "",
        password: "",
        access:"False"
      });
      setFormErrors({});
      
    } else {
      setFormErrors(errors);
    }
  };

  const validateForm = (data) => {
    const errors = {};

    if (!data.organizationName) {
      errors.organizationName = "Organization name is required";
    }

    if (!data.WebsiteUrl) {
      errors.WebsiteUrl = "Website URL is required";
    } else if (!/^https?:\/\/[\w-]+(\.[\w-]+)+([\w-.,@?^=%&:/+#]*[\w@?^=%&/+#])?$/.test(data.WebsiteUrl)) {
      errors.WebsiteUrl = "Invalid website URL";
    }

    if (!data.GitlabID) {
      errors.GitlabID = "GitlabID is required";
    }

    if (!data.orgType) {
      errors.orgType = "Organization type is required";
    }

    if (!data.ImgUrl) {
      errors.ImgUrl = "Logo is required";
    }

    if (!data.Address1) {
      errors.Address1 = "Address line 1 is required";
    }

    if (!data.AreaName) {
      errors.AreaName = "Area name is required";
    }

    if (!data.City) {
      errors.City = "City is required";
    }

    if (!data.state) {
      errors.state = "State is required";
    }

    if (!data.pincode) {
      errors.pincode = "Pincode is required";
    } else if (!/^\d{6}$/.test(data.pincode)) {
      errors.pincode = "Invalid pincode";
    }

    if (!data.country) {
      errors.country = "Country is required";
    }

    if (!data.email) {
      errors.email = "Email is required for NGOs";
    }

    if (!data.password) {
      errors.password = "Password is required for NGOs";
    }

    // Add more validations as needed for other fields
    return errors;
  };

  return (
    <Box
      sx={{ 
        width: "60%",
        height: "100vh",
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "center",
        margin: "0 auto",
      }}
    >
      <AccountCircleIcon sx={{ fontSize: 56, color: "#333333" }} />
      <Typography variant="h5" sx={{ mt: 2 }}>
        Register your organization
      </Typography>
      <form onSubmit={handleSubmit} style={{ width: "100%", marginTop: "20px" }}>
        <Grid container spacing={2}>
          <Grid item xs={12} sm={6}>
            <TextField
              label="Organization Name"
              name="OrgName"
              value={formData.OrgName}
              onChange={handleChange}
              fullWidth
              error={!!formErrors.OrgName}
              helperText={formErrors.OrgName}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              label="Website URL"
              name="WebsiteUrl"
              value={formData.WebsiteUrl}
              onChange={handleChange}
              fullWidth
              error={!!formErrors.WebsiteUrl}
              helperText={formErrors.WebsiteUrl}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              label="GitlabID"
              name="GitlabID"
              value={formData.GitlabID}
              onChange={handleChange}
              fullWidth
              error={!!formErrors.GitlabID}
              helperText={formErrors.GitlabID}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              select
              label="Organization Type"
              name="orgType"
              value={formData.orgType}
              onChange={handleChange}
              fullWidth
            >
              {organizationTypes.map((type, index) => (
                <MenuItem key={index} value={type}>
                  {type}
                </MenuItem>
              ))}
            </TextField>
          </Grid>
          <Grid item xs={12}>
            <input
              type="file"
              onChange={handleImageUpload}
              accept="image/png, image/jpeg"
            />
            {formErrors.ImgUrl && (
              <Typography color="error">{formErrors.ImgUrl}</Typography>
            )}
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              label="Address Line 1"
              name="Address1"
              value={formData.Address1}
              onChange={handleChange}
              fullWidth
              error={!!formErrors.Address1}
              helperText={formErrors.Address1}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              label="Address Line 2"
              name="Address2"
              value={formData.Address2}
              onChange={handleChange}
              fullWidth
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              label="Area Name"
              name="AreaName"
              value={formData.AreaName}
              onChange={handleChange}
              fullWidth
              error={!!formErrors.AreaName}
              helperText={formErrors.AreaName}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              label="City"
              name="City"
              value={formData.City}
              onChange={handleChange}
              fullWidth
              error={!!formErrors.City}
              helperText={formErrors.City}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              label="State"
              name="state"
              value={formData.state}
              onChange={handleChange}
              fullWidth
              error={!!formErrors.state}
              helperText={formErrors.state}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              label="Country"
              name="country"
              value={formData.country}
              onChange={handleChange}
              fullWidth
              error={!!formErrors.country}
              helperText={formErrors.country}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              label="PinCode"
              name="pincode"
              value={formData.pincode}
              onChange={handleChange}
              fullWidth
              error={!!formErrors.pincode}
              helperText={formErrors.pincode}
            />
          </Grid>
          <Grid item xs={12}>
          <FormControlLabel
              control={
                <Checkbox
                  checked={formData.role === "NGO"}
                  onChange={handleChange}
                  name="role"
                />
              }
              label="Are you an NGO?"
            />

          </Grid>
            <>
              <Grid item xs={12}>
                <TextField
                  label="Email"
                  name="email"
                  type="email"
                  value={formData.email}
                  onChange={handleChange}
                  fullWidth
                  error={!!formErrors.email}
                  helperText={formErrors.email}
                />
              </Grid>
              <Grid item xs={12}>
                <TextField
                  label="Password"
                  name="password"
                  type="password"
                  value={formData.password}
                  onChange={handleChange}
                  fullWidth
                  error={!!formErrors.password}
                  helperText={formErrors.password}
                />
              </Grid>
            </>

          <Grid item xs={12}>
            <Button type="submit" variant="contained" fullWidth>
              Register
            </Button>
          </Grid>
        </Grid>
      </form>
    </Box>
  );
};

export default SignUpComp;
