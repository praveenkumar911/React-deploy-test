const express = require('express');
const mongoose = require('mongoose');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const bodyParser = require('body-parser');
const cors=require('cors')
const app = express();
const port = 3001;
app.use(cors())
// Connect to MongoDB (change the URL based on your setup)
mongoose.connect('mongodb://0.0.0.0:27017/roleAuth', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const db = mongoose.connection;
db.on('error', console.error.bind(console, 'MongoDB connection error:'));
db.once('open', () => {
  console.log('Connected to MongoDB');
});

// Schema for Employee
const employeeSchema = new mongoose.Schema(
  {
    name: { type: String, required: true },
    email: { type: String, required: true },
    role: { type: String, enum: ['NGO', 'Dev', 'Core', 'Org'] },
    password: { type: String, required: true },
  },
  { timestamps: true }
);
const secretKey='hjdjnqbh3#$%#^@&*ejijhkwuibgfikjwrb'

const Employee = mongoose.model('Employee', employeeSchema);

app.use(bodyParser.json());

// Middleware for verifying JWT token
const verifyToken = (req, res, next) => {
  const token = req.header('Authorization');
  if (!token) return res.status(401).send('Access denied. No token provided.');

  jwt.verify(token, secretKey, (err, decoded) => {
    if (err) return res.status(403).send('Invalid token.');

    req.user = decoded;
    next();
  });
};

// Route to generate a token (login)
app.post('/login', async (req, res) => {
  const { email, password } = req.body;

  // Simple check for email and password (customize based on your authentication logic)
  if (!email || !password) {
    return res.status(400).json({ message: 'Email and password are required.' });
  }

  try {
    const user = await Employee.findOne({ email });
    if (!user || !bcrypt.compareSync(password, user.password)) {
      return res.status(401).json({ message: 'Invalid email or password.' });
    }

    // Create a token with user information and role
    const token = jwt.sign({ email: user.email, role: user.role }, secretKey, { expiresIn: '12h' });

    res.json({ token });
  } catch (error) {
    console.error('Error during login:', error);
    res.status(500).json({ message: 'Internal server error.' });
  }
});
app.post('/signup', async (req, res) => {
    const { name, email, role, password } = req.body;
  
    // Simple check for required fields (customize based on your registration logic)
    if (!name || !email || !role || !password) {
      return res.status(400).json({ message: 'All fields are required.' });
    }
  
    try {
      // Check if the email is already registered
      const existingUser = await Employee.findOne({ email });
      if (existingUser) {
        return res.status(409).json({ message: 'Email is already registered.' });
      }
  
      // Hash the password before saving it
      const hashedPassword = bcrypt.hashSync(password, 10);
  
      // Create a new user
      const newUser = new Employee({
        name,
        email,
        role,
        password: hashedPassword,
      });
  
      // Save the new user to the database
      await newUser.save();
  
      res.status(201).json({ message: 'User registered successfully.' });
    } catch (error) {
      console.error('Error during signup:', error);
      res.status(500).json({ message: 'Internal server error.' });
    }
  });
app.get('/data', verifyToken, async (req, res) => {
    try {
      let data;
  
      switch (req.user.role) {
        case 'Core':
          // Access granted for Core role
          // Get all developers and organizations data
          data = {
            role:'CORE',
          /*   name:req.user.name, */
            developers: await Employee.find({ role: 'Dev' }),
            organizations: await Employee.find({ role: 'Org' }),
            ngo: await Employee.find({ role: 'NGO' }),
          };
          break;
  
        case 'Org':
          // Access granted for Organization role
          // Get all developers and NGO data
          data = {
            role:'ORG',
            developers: await Employee.find({ role: 'Dev' }),
            ngo: await Employee.find({ role: 'NGO' }),
          };
          break;
  
        case 'NGO':
          // Access granted for NGO role
          // Get all developers and organizations data
          data = {
            role:'NGO',
            developers: await Employee.find({ role: 'Dev' }),
            organizations: await Employee.find({ role: 'Org' }),
          };
          break;
        case 'Dev':
            data = {
              role:'Dev',
            };
          break;
  
        default:
          return res.status(403).send('Permission denied.');
      }
  
      res.json(data);
    } catch (error) {
      console.error('Error fetching data:', error);
      res.status(500).json({ message: 'Internal server error.' });
    }
  });
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
